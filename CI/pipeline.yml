# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
    # - master
    # - releases/*
  paths:
    exclude:
    - README.md
    - CHANGELOG.md

jobs:
  - job: Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    - powershell: 'Install-Module -Name Pester,PlatyPS,platyPS,PSScriptAnalyzer -Force -SkipPublisherCheck'
      displayName: 'Update Modules'
    - powershell: './CI/CI.ps1 -Test'
      displayName: 'Check Build Check Pack Test'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults*.xml'
        failTaskOnFailedTests: true

    - powershell: './CI/CI.ps1 -Artifact'
      displayName: 'Prepare Artifact'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'Modules'
    - powershell: './CI/CI.ps1 -Analyzer'
      displayName: 'Invoke ScriptAnalyzer'

  - job: WindowsPSCore
    pool:
      vmImage: 'windows-latest'

    steps:
    - pwsh: 'Install-Module -Name Pester -Force'
      displayName: 'Update Pester'
    - pwsh: './CI/CI.ps1 -Test'
      displayName: 'Install and Test'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults*.xml'
        failTaskOnFailedTests: true

  - job: Ubuntu
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - powershell: 'Install-Module -Name Pester -Force'
      displayName: 'Update Pester'
    - powershell: './CI/CI.ps1 -Test'
      displayName: 'Install and Test'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults*.xml'
        failTaskOnFailedTests: true

  - job: macOS
    pool:
      vmImage: 'macOS-latest'

    steps:
    - script: brew install mono-libgdiplus
      displayName: 'Install mono-libgdiplus'
    - powershell: 'Install-Module -Name Pester -Force'
      displayName: 'Update Pester'
    - powershell: './CI/CI.ps1 -Test'
      displayName: 'Install and Test'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults*.xml'
        failTaskOnFailedTests: true